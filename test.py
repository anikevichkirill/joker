#  task1
#  Напишите функцию, которая будет принимать номер кредитной карты и
# показывать только последние 4 цифры. Остальные цифры должны заменяться
# звездочками

# def credit_card(a):
#     print('*' * len(a[:-4]) + a[-4:])
#
#
# credit_card(input("Введите номер кредитной карты: "))

# task2
# Напишите функцию, которая проверяет: является ли слово палиндромом


# def pol(a):
#
#     if a == a[::-1]:
#         print('Это полиндром')
#     else:
#         print('Это не полиндром')
#
#
# pol(input('Введите слово: '))


# task3
# Класс Tomato:
# 1. Создайте класс Tomato
# 2. Создайте статическое свойство states, которое будет содержать все стадии
# созревания помидора
# 3. Создайте метод __init__(), внутри которого будут определены два динамических
# protected свойства: 1) _index - передается параметром и 2) _state - принимает первое
# значение из словаря states
# 4. Создайте метод grow(), который будет переводить томат на следующую стадию
# созревания
# 5. Создайте метод is_ripe(), который будет проверять, что томат созрел (достиг
# последней стадии созревания)
class Tomato:
    states = {'Прорастание': 0, 'Рост': 1, 'Цветение': 2, 'Созревание': 3, 'Плодоношение': 4}

    def __init__(self, index):
        self._index = index
        self._states = self.states['Прорастание']

    def grow(self):
        if self._states < 4:
            self._states += 1

    def is_ripe(self):
        if self._index == 4:
            return True
        else:
            return False

# Класс TomatoBush
# 1. Создайте класс TomatoBush
# 2. Определите метод __init__(), который будет принимать в качестве параметра
# количество томатов и на его основе будет создавать список объектов класса
# Tomato. Данный список будет храниться внутри динамического свойства tomatoes.
# 3. Создайте метод grow_all(), который будет переводить все объекты из списка
# томатов на следующий этап созревания
# 4. Создайте метод all_are_ripe(), который будет возвращать True, если все томаты из
# списка стали спелыми
# 5. Создайте метод give_away_all(), который будет чистить список томатов после
# сбора урожая


class TomatoBush:
    def __init__(self, col_pot):
        self.tomatoes = [Tomato(i) for i in range(1, col_pot + 1)]

    def grow_all(self):
        pass

    def all_are_ripe(self):
        pass

    def give_away_all(self):
        pass
# Класс Gardener
# 1. Создайте класс Gardener
# 2. Создайте метод __init__(), внутри которого будут определены два динамических
# свойства: 1) name - передается параметром, является публичным и 2) _plant -
# принимает объект класса Tomato, является protected
# 3. Создайте метод work(), который заставляет садовника работать, что позволяет
# растению становиться более зрелым
# 4. Создайте метод harvest(), который проверяет, все ли плоды созрели. Если все -
# садовник собирает урожай. Если нет - метод печатает предупреждение.
# 5. Создайте статический метод knowledge_base(), который выведет в консоль справку
# по садоводству.

